GALLEON_GENERIC_LAYERS_DEFINITION="$JBOSS_CONTAINER_WILDFLY_S2I_MODULE"/galleon/provisioning/generic_layers
GALLEON_EXTEND_CONFIG_DEFINITION="$JBOSS_CONTAINER_WILDFLY_S2I_MODULE"/galleon/provisioning/extend_config
GALLEON_DS_FP="$JBOSS_CONTAINER_WILDFLY_S2I_MODULE"/galleon/ds-galleon-feature-pack

function galleon_patch_generic_config() {
   if [ -n "$GALLEON_PROVISION_LAYERS" ]; then
     for layer in $(echo $GALLEON_PROVISION_LAYERS | sed "s/,/ /g"); do
       layers="$layers<include name=\"$layer\"/>"
     done
     if [ -n "$layers" ]; then
       sed -i "s|<!-- ##GALLEON_LAYERS## -->|${layers}|" $GALLEON_GENERIC_LAYERS_DEFINITION/config.xml
     fi
   fi

   if [ "x$GALLEON_ADD_DS_FP" == "xtrue" ]; then
      ds_fp=`cat "${GALLEON_DS_FP}" | sed ':a;N;$!ba;s/\n//g'`
      sed -i "s|<!-- ##GALLEON_DS_FP## -->|${ds_fp}|" $GALLEON_GENERIC_LAYERS_DEFINITION/pom.xml
   fi
}

function galleon_patch_extend_default_config() {
   if [ -n "$GALLEON_PROVISION_DEFAULT_CONFIG_LAYERS" ]; then
     for layer in $(echo $GALLEON_PROVISION_DEFAULT_CONFIG_LAYERS | sed "s/,/ /g"); do
       layers="$layers<include name=\"$layer\"/>"
     done
     if [ -n "$layers" ]; then
       sed -i "s|<!-- ##GALLEON_LAYERS## -->|${layers}|" $GALLEON_EXTEND_CONFIG_DEFINITION/config.xml
     fi
   fi

   if [ "x$GALLEON_ADD_DS_FP" == "xtrue" ]; then
      ds_fp=`cat "${GALLEON_DS_FP}" | sed ':a;N;$!ba;s/\n//g'`
      sed -i "s|<!-- ##GALLEON_DS_FP## -->|${ds_fp}|" $GALLEON_EXTEND_CONFIG_DEFINITION/pom.xml
   fi
}

function galleon_dump_repo_file_list() {
    targetFile=$1
    pushd "$GALLEON_LOCAL_MAVEN_REPO" &> /dev/null
    find  -type f -printf '%P\n' > $targetFile
    popd &> /dev/null
}

function galleon_cp_artifacts() {
    filename=$1
    targetDir=$2
    prefix="> "
    while read line; do
      first=${line::1}
      if [ $first == $prefix ]; then
        file=${line#"$prefix"}
        dir=`dirname $file`
        mkdir -p "$targetDir/$dir" && cp -r "$GALLEON_LOCAL_MAVEN_REPO/$file" "$targetDir/$dir"
    fi
    done < $filename
}

function galleon_build_repo_diff() {
    LIVE=$HOME/galleon-maven-repo-live.txt
    STATIC=$HOME/galleon-maven-repo-snapshot.txt
    DIFF=$HOME/galleon-maven-repo.diff
    TARGET_DIR=$1
    LIVE_M2=$TARGET_DIR/galleon-m2

    galleon_dump_repo_file_list $LIVE

    diff $STATIC $LIVE > $DIFF

    galleon_cp_artifacts $DIFF $LIVE_M2

    rm -rf $LIVE $DIFF &> /dev/null
}

function galleon_handle_incremental_build() {
    artifacts=/tmp/artifacts/galleon-m2
    if [ -d $artifacts ]; then
       pushd "$artifacts" &> /dev/null
       cp -r * $GALLEON_LOCAL_MAVEN_REPO
       popd &> /dev/null
       rm -rf $artifacts &> /dev/null
    fi
}

function galleon_init_mvn_env() {
    # Capture the list of files present in maven repo. Used by save-artifacts
    # Do it at s2i time, not at build image time, otherwise not exact result in file content (OS dependent ordering)
    galleon_dump_repo_file_list $HOME/galleon-maven-repo-snapshot.txt

    # Check if we have artifacts injected from previous build
    galleon_handle_incremental_build

    # store original MAVEN_ARGS and MAVEN_LOCAL_REPO
    if [ -n "$MAVEN_ARGS" ]; then
      ORIGINAL_MAVEN_ARGS=$MAVEN_ARGS
    fi
    if [ -n "$MAVEN_LOCAL_REPO" ]; then
      ORIGINAL_MAVEN_LOCAL_REPO=$MAVEN_LOCAL_REPO
    fi
    # Required for S2I_SOURCE_DIR to be initialized
    maven_s2i_init
    # reset part of the s2i maven initialization to adapt to galleon local repo
    MAVEN_LOCAL_REPO=$GALLEON_LOCAL_MAVEN_REPO
    unset MAVEN_ARGS
    if [ -n "$ORIGINAL_MAVEN_ARGS" ]; then
      MAVEN_ARGS=$ORIGINAL_MAVEN_ARGS
    fi
    maven_init_var_MAVEN_ARGS
}

function galleon_reset_mvn_env() {
    # cleanup galleon local repository if required
    maven_cleanup

    # restore MAVEN_LOCAL_REPO
    unset MAVEN_LOCAL_REPO
    if [ -n "$ORIGINAL_MAVEN_LOCAL_REPO" ]; then
      MAVEN_LOCAL_REPO=$ORIGINAL_MAVEN_LOCAL_REPO
    fi

    # reset args to be clean when consumed by s2i
    # MAVEN_ARGS could contain Galleon local repository
    unset MAVEN_ARGS
    if [ -n "$ORIGINAL_MAVEN_ARGS" ]; then
      MAVEN_ARGS=$ORIGINAL_MAVEN_ARGS
    fi
}

function galleon_provision_server() {
    galleon_init_mvn_env
    # Embedded galleon description
    GALLEON_LOCAL_PROVISIONING=$S2I_SOURCE_DIR/galleon
    GALLEON_ROOT_DIR=${GALLEON_DEFINITIONS}

    nb=0
    if [ -n "$GALLEON_PROVISION_SERVER" ]; then
      nb=$((nb+1))
    fi

    if [ -n "$GALLEON_PROVISION_LAYERS" ]; then
      nb=$((nb+1))
    fi

    if [ -n "$GALLEON_PROVISION_DEFAULT_CONFIG_LAYERS" ]; then
      nb=$((nb+1))
    fi

    if [ $nb -gt 1 ]; then
      echo "Error, GALLEON_PROVISION_SERVER, GALLEON_PROVISION_LAYERS or GALLEON_PROVISION_DEFAULT_CONFIG_LAYERS can't be used at the same time."
      exit 1
    fi

    if [ -n "$GALLEON_PROVISION_LAYERS" ]; then
      galleon_patch_generic_config
      GALLEON_DESCRIPTION_LOCATION="$GALLEON_GENERIC_LAYERS_DEFINITION"
      if [ -d $GALLEON_LOCAL_PROVISIONING ]; then
        echo "Galleon provisioning of layers overrides Galleon description in $GALLEON_LOCAL_PROVISIONING"
      fi
    elif [ -n "$GALLEON_PROVISION_DEFAULT_CONFIG_LAYERS" ]; then
      galleon_patch_extend_default_config
      GALLEON_DESCRIPTION_LOCATION="$GALLEON_EXTEND_CONFIG_DEFINITION"
      if [ -d $GALLEON_LOCAL_PROVISIONING ]; then
        echo "Galleon provisioning of extended default configuration with layers overrides Galleon description in $GALLEON_LOCAL_PROVISIONING"
      fi
    fi

    if [ -z "$GALLEON_DESCRIPTION_LOCATION" ]; then
        if [ -z "$GALLEON_PROVISION_SERVER" ]; then
          if [ -d $GALLEON_LOCAL_PROVISIONING ]; then
            echo "Provisioning server with Galleon description in $GALLEON_LOCAL_PROVISIONING"
            GALLEON_DESCRIPTION_LOCATION=$GALLEON_LOCAL_PROVISIONING
          fi
        else
          if [ ! -d $GALLEON_ROOT_DIR/$GALLEON_PROVISION_SERVER ]; then
            echo "Error, $GALLEON_PROVISION_SERVER doesn't exist, can't provision a server, exiting."
            exit 1
          fi
          if [ -d $GALLEON_LOCAL_PROVISIONING ]; then
            echo "$GALLEON_SERVER Galleon description overrides Galleon description in $GALLEON_LOCAL_PROVISIONING"
          fi
          GALLEON_DESCRIPTION_LOCATION=$GALLEON_ROOT_DIR/$GALLEON_PROVISION_SERVER
        fi
    fi

    if [ ! -z "$GALLEON_DESCRIPTION_LOCATION" ]; then
      
      if [ -f "$GALLEON_DESCRIPTION_LOCATION/pom.xml" ]; then
          echo "Provisioning WildFly server from $GALLEON_DESCRIPTION_LOCATION..."
          maven_build "$GALLEON_DESCRIPTION_LOCATION" install

          ERR=$?
          if [ $ERR -ne 0 ]; then
            echo "Aborting due to error code $ERR from mvn install"
            exit $ERR
          fi
          targetDir=$GALLEON_DESCRIPTION_LOCATION/target/server
          if [ -d $targetDir ]; then
            galleon_replace_server $targetDir
          else
            echo "Error, no server provisioned in $targetDir"
            exit 1
          fi
      else
          echo "Not a valid galleon description $GALLEON_DESCRIPTION_LOCATION exiting"
          exit 1
      fi
    fi
    galleon_reset_mvn_env
}

function galleon_replace_server() {
  echo "Replacing server with provisioned one"
  srcDir=$1
  rm -rf $JBOSS_HOME/.galleon
  rm -rf $JBOSS_HOME/*
  rm -rf /deployments/*
  cp -prf $srcDir/* $JBOSS_HOME
  cp -prf $srcDir/.galleon $JBOSS_HOME/.galleon
  cp -prf $JBOSS_HOME/standalone/deployments/* /deployments
  rm -rf $JBOSS_HOME/standalone/deployments
  ln -s /deployments $JBOSS_HOME/standalone/deployments
  chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
}
